//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutopackageTestProject.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AutopackageTestProject.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;stdio.h&gt;
        ///
        ///[$IMPORT_LIBRARY]
        ///
        ///int print_[$LIBNAME]() { 
        ///    printf(&quot;&quot;&lt;app name=&apos;[$LIBNAME]&apos;&gt;\r\n&quot;&quot;);
        ///    
        ///    [$CALL_LIBRARY]
        ///        
        ///    printf(&quot;&quot;&lt;/app&gt;\r\n&quot;&quot;);
        ///    return 0;
        ///}
        ///
        ///int main(int argc, char** argv) {
        ///    print_[$LIBNAME]();
        ///    return 0;
        ///}.
        /// </summary>
        internal static string AppTemplate {
            get {
                return ResourceManager.GetString("AppTemplate", resourceCulture);
            }
        }
        
        internal static byte[] CoAppTestCert {
            get {
                object obj = ResourceManager.GetObject("CoAppTestCert", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static byte[] CoAppTestCertPublicKey {
            get {
                object obj = ResourceManager.GetObject("CoAppTestCertPublicKey", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to printf(&quot;&quot;&lt;request name=&apos;[$LIBNAME]&apos; version=&apos;[$LIBVERSION]&apos; /&gt;\r\n&quot;&quot; );
        ///        print_[$LIBNAME]();.
        /// </summary>
        internal static string LibraryFunctionCallTemplate {
            get {
                return ResourceManager.GetString("LibraryFunctionCallTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // #pragma comment(linker, &quot;&quot;\&quot;&quot;/manifestdependency: name=&apos;[$LIBNAME]&apos; version=&apos;[$LIBVERSION]&apos;  type=&apos;win32&apos; processorArchitecture=&apos;[$ARCH]&apos; \&quot;&quot;&quot;&quot;)
        ///__declspec(dllimport) int print_[$LIBNAME]();.
        /// </summary>
        internal static string LibraryReferenceTemplate {
            get {
                return ResourceManager.GetString("LibraryReferenceTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LIBRARY
        ///EXPORTS
        ///     .
        /// </summary>
        internal static string ModuleDefinitionFileTemplate {
            get {
                return ResourceManager.GetString("ModuleDefinitionFileTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Reflection;
        ///using System.Runtime.CompilerServices;
        ///using System.Runtime.InteropServices;
        ///
        ///[assembly: AssemblyTitle(&quot;&quot;[$LIBNAME]&quot;&quot;)]
        ///[assembly: AssemblyVersion(&quot;&quot;[$LIBVERSION]&quot;&quot;)]
        ///
        ///namespace [$LIBNAME]
        ///{
        ///    public class [$LIBNAME]
        ///    {
        ///        public static void print_[$LIBNAME]() { 
        ///            Console.WriteLine(&quot;&quot;&lt;app name=&apos;[$LIBNAME]&apos;&gt;\r\n&quot;&quot;);
        ///    
        ///            [$CALL_LIBRARY]
        ///        
        ///            Console.WriteLine(&quot;&quot;&lt;/app&gt;\r\n&quot;&quot;);
        ///        }
        ///
        ///
        ///        publi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MSILAppTemplate {
            get {
                return ResourceManager.GetString("MSILAppTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Console.WriteLine(&quot;&quot;&lt;request name=&apos;[$LIBNAME]&apos; version=&apos;[$LIBVERSION]&apos; /&gt;\r\n&quot;&quot; );
        ///        [$LIBNAME].[$LIBNAME].print_[$LIBNAME]();.
        /// </summary>
        internal static string MSILLibraryFunctionCallTemplate {
            get {
                return ResourceManager.GetString("MSILLibraryFunctionCallTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Reflection;
        ///using System.Runtime.CompilerServices;
        ///using System.Runtime.InteropServices;
        ///
        ///[assembly: AssemblyTitle(&quot;&quot;[$LIBNAME]&quot;&quot;)]
        ///[assembly: AssemblyVersion(&quot;&quot;[$LIBVERSION]&quot;&quot;)]
        ///
        ///namespace [$LIBNAME] 
        ///{
        ///    public class [$LIBNAME]
        ///    {
        ///        public static void print_[$LIBNAME]() 
        ///        { 
        ///            Console.WriteLine(&quot;&quot;&lt;lib name=&apos;[$LIBNAME]&apos; version=&apos;[$LIBVERSION]&apos;&gt;\r\n&quot;&quot;);
        ///    
        ///            [$CALL_LIBRARY]
        ///        
        ///            Console.WriteLine(&quot;&quot;&lt;/lib&gt;\r\ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MSILSharedLibTemplate {
            get {
                return ResourceManager.GetString("MSILSharedLibTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [exe]
        ///AppOne({a}.0.0.0)=LibA({a}.0.0.0)
        ///
        ///AppTwo({a}.0.0.0)=LibB({a}.0.0.0)
        ///AppTwo({a}.0.0.0)=LibC({a}.0.0.0)
        ///
        ///AppThree({a}.0.0.0)=LibA({a}.0.0.0)
        ///AppThree({a}.0.0.0)=LibC({b}.0.0.0)
        ///
        ///AppFour({a}.0.0.0)=LibD({b}.0.0.0)
        ///AppFour({a}.0.0.0)=LibC({b}.0.0.0)
        ///
        ///[dll]
        ///LibA({a}.0.0.0)
        ///LibA({a}.0.0.1)
        ///LibA({b}.0.0.0)=LibB({a}.0.0.0)
        ///
        ///LibB({a}.0.0.0)=LibC({a}.0.0.0)
        ///LibB({a}.0.0.1)=LibC({a}.0.0.0)
        ///LibB({b}.0.0.0)=LibC({a}.0.0.0)
        ///LibB({b}.0.0.1)=LibC({b}.0.0.0)
        ///                    
        ///LibC({a}.0.0.0)= [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PackageMaker {
            get {
                return ResourceManager.GetString("PackageMaker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;stdio.h&gt;
        ///
        ///__declspec(dllexport) int print_[$LIBNAME]() { 
        ///    printf(&quot;&quot;&lt;lib name=&apos;[$LIBNAME]&apos; version=&apos;[$LIBVERSION]&apos;&gt;\r\n&quot;&quot;);
        ///    
        ///    [$CALL_LIBRARY]
        ///        
        ///    printf(&quot;&quot;&lt;/lib&gt;\r\n&quot;&quot;);
        ///    return 0;
        ///}.
        /// </summary>
        internal static string SharedLibTemplate {
            get {
                return ResourceManager.GetString("SharedLibTemplate", resourceCulture);
            }
        }
    }
}
